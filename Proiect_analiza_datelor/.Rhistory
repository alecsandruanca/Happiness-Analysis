getwd()
happiness_2017<-read.csv("C:/Users/Anca/Documents/Proiect_analiza_datelor/Raport_2017",row.names = 1)
library(readr)
dataset <- read_csv(NULL)
View(dataset)
dataset<-read.csv("C:/Users/Anca/Documents/Proiect_analiza_datelor/Raport_2017.csv",row.names = 1)
View(dataset)
library("FactoMineR")
library("factoextra")
library("corrplot")
install.packages("ggplot2")
install.packages("ggplot2")
library("FactoMineR")
library("factoextra")
library("corrplot")
happiness<-dataset[,c(2,5:10)]
View(happiness)
library(mice)
install.packages("lattice")
install.packages("lattice")
install.packages("lattice")
install.packages("lattice")
install.packages("lattice")
install.packages("lattice")
install.packages("lattice")
install.packages("lattice")
install.packages("lattice")
install.packages("lattice")
install.packages("lattice")
install.packages("lattice")
install.packages("lattice")
install.packages("lattice")
install.packages("lattice")
install.packages("lattice")
install.packages("lattice")
install.packages("lattice")
install.packages("lattice")
library("mice")
library(mice)
install.packages("lattice")
install.packages("lattice")
library("mice")
md.pattern(happiness)
M<-cor(happiness)
cor
corrplot(M,method="elipse")
library(corrplot)
corrplot(M,method="elipse")
corrplot(M,method="ellipse")
corrplot(M,method="pie")
corrplot(M,method="color")
corrplot(M,method="circle")
happy.pca<-PCA(happiness,graph=F)
autoplot(prcomp(happiness))
library("ggfortify")
install.packages("ggfortify")
library(ggfortify)
autoplot(prcomp(happiness))
save.image("~/Proiect_analiza_datelor/mic_workspace.RData")
autoplot(prcomp(happiness),colours='Species')
autoplot(prcomp(happiness),data=Happiness.Score,colours='Species')
autoplot(prcomp(happiness),data=happiness,colours(distinct = TRUE))
autoplot(prcomp(happiness),data=dataset,colour='Species')
autoplot(prcomp(happiness),data=dataset,colour='species')
Error in grDevices::col2rgb(colour, TRUE) : invalid color name 'species'
autoplot(prcomp(happiness),data=dataset,colour=Species)
autoplot(prcomp(happiness),data=dataset,colour=what)
autoplot(prcomp(happiness),data=dataset,colour='GDP.Capita')
df<-happiness[c(1,2,3,4)]
autoplot(prcomp(df))
autoplot(prcomp(df), data = happiness, colour = 'Happiness.Score')
View(dataset)
prcomp
M
view(M)
View(M)
View(M)
getwd()
dataset2015<-read.csv("C:/Users/Anca/Documents/Proiect_analiza_datelor/Raport_2015.csv")
View(dataset2015)
autoplot(prcomp(dataset2015))
View(dataset(c(2)))
View(dataset[,c(2,5:7)])
View(dataset)
View(dataset)
View(dataset2015)
View(dataset2015)
View(dataset[3,])
View(dataset2015[,c(3,)])
View(dataset2015)
View(dataset2015[, c(4,)])
View(dataset2015[, c(4,5:8)])
View(dataset2015)
View(dataset2015)
View(dataset2015[, c(4,5:11)])
View(dataset2015)
View(dataset2015)
imp_col<-dataset[,c(4,5:11)])
imp_col<-dataset[,c(4,5:11)]
View(imp_col)
imp_col<-dataset2015[,c(4,5:11)]
View(dataset)
autoplot(prcomp(imp_col),data=dataset2015,colour='Region')
prcomp
autoplot(prcomp(imp_col),data=dataset2015,colour='Region',loadings = TRUE)
autoplot(prcomp(imp_col),data=dataset2015,colour='Region',loadings = TRUE)
tryCatch({
table<-read.csv(filename,header = TRUE,row.names = 1)
return(table)
}),
error=functio(e){
stop(paste("File reading error",e))
}
table<-read.csv(filename,header = TRUE,row.names = 1)
table<-read.csv(filename,row.names = 1)
return(table)
tryCatch({
table<-read.csv(filename,row.names = 1)
return(table)
},)
return(table)
getwd()
corrplot(M)
library("corrplot")
corrplot(M)
C:/Users/Anca/Documents/Proiect_analiza_datelor
autoplot(prcomp(happiness),data=dataset,colour='GDP.Capita')
C:/Users/Anca/Documents/Proiect_analiza_datelor
autoplot(prcomp(happiness),dataset2015,colour='gdp.capita')
library("ggfortify")
autoplot(prcomp(happiness),dataset2015,colour='gdp.capita')
autoplot(prcomp(happiness),dataset2015,colour='Happiness.Score')
autoplot(prcomp(happiness),dataset,colour='Happiness.Score')
dataset<-na.omit(dataset)
dataset<-scale(dataset)
wss <- (nrow(dataset)-1)*sum(apply(dataset,2,var))
for (i in 2:15) wss[i] <- sum(kmeans(dataset,
centers=i)$withinss)
plot(1:15, wss, type="b", xlab="Number of Clusters",
ylab="Within groups sum of squares")
# K-Means Cluster Analy
for (i in 2:15) wss[i] <- sum(kmeans(dataset,
centers=i)$withinss)
plot(1:15, wss, type="b", xlab="Number of Clusters",
ylab="Within groups sum of squares")
# K-Means Cluster Analy
div.new
div.new()
for (i in 2:15) wss[i] <- sum(kmeans(dataset,
+                                      centers=i)$withinss)
> plot(1:15, wss, type="b", xlab="Number of Clusters"
graphics.off()
par("mar")
par(mar=c(1,1,1,1))
for (i in 2:15) wss[i] <- sum(kmeans(dataset,
centers=i)$withinss)
plot(1:15, wss, type="b", xlab="Number of Clusters",
ylab="Within groups sum of squares")
mydatatM<-dataset
fit <- kmeans(mydata, 3)
mydata<-dataset
fit <- kmeans(mydata, 3)
fit
aggregate(mydata,by=list(fit$cluster),FUN=mean)
mydata <- data.frame(mydata, fit$cluster)
d <- dist(mydata, method = "euclidean") # distance matrix
fit <- hclust(d, method="ward")
plot(fit) # display dendogram
groups <- cutree(fit, k=5) # cut tree into 5 clusters
# draw dendogram with red borders around the 5 clusters
rect.hclust(fit, k=5, border="red")
library(mclust)
fit <- Mclust(mydata)
plot(fit) # plot results
library(fpc)
plotcluster(mydata, fit$cluster)
library(cluster)
clusplot(mydata, fit$cluster, color=TRUE, shade=TRUE,
labels=2, lines=0)
View(dataset)
data=read.csv("Raport_2017.csv")
View(data)
d=data(,c(1,3:11))
d=data(,c(1,3:10))
d=data(c(1,3:10))
d=df(data(c,1,3:10))
d=data[c(1,3,4,5,6,7,8,9,10,11)]
view(d)
View(d)
View(data)
str(data)
data=read.csv("Raport_2015.csv")
View(data)
d=data[c(1,3,4,5,6,7,8,9,10,11)]
View(d)
str(data)
summary(data)
summary(data)
summary(data)
library(psych)
install.packages("psych")
library(psych)
pairs.panels(data[,-2],gap=0,colour='Region',pch=21)
warnings()
pairs.panels(data[,-2],gap=0,bg=c("red","yellow","blue","green")[data$Region],pch=21)
pairs.panels(data[,-2],gap=0,bg=c("red","yellow","blue","green")[data$Region],pch=21)
# library
library(ggplot2)
# The mtcars dataset is proposed in R
head(data)
# Color and shape depend on factor (categorical variable)
ggplot(data, aes(x=data$Economy..GDP.per.Capita.
, y=data$Happiness.Score, color=Region, shape=Region)) +
geom_point(size=6, alpha=0.6)
ggplot(iris, aes(x=data$Economy..GDP.per.Capita., y=data$Happiness.Score, color=Region, size=Region)) +
geom_point(alpha=0.6)
ggplot(iris, aes(x=data$Economy..GDP.per.Capita., y=data$Happiness.Score, color=Region, size=data$Happiness.Score)) +
geom_point(alpha=0.6)
ggplot(data, aes(x=data$Economy..GDP.per.Capita., y=data$Happiness.Score, color=Region, size=data$Happiness.Score)) +
geom_point(alpha=0.6)
# Set a unique color with fill, colour, and alpha
ggplot(mpg, aes(x=data$Economy..GDP.per.Capita., y=data$Happiness.Score)) +
geom_boxplot(color="red", fill="orange", alpha=0.2)
# Set a unique color with fill, colour, and alpha
ggplot(data, aes(x=data$Economy..GDP.per.Capita., y=data$Happiness.Score)) +
geom_boxplot(color="red", fill="orange", alpha=0.2)
# Set a unique color with fill, colour, and alpha
ggplot(data, aes(x=class, y=data$Happiness.Score)) +
geom_boxplot(color="red", fill="orange", alpha=0.2)
pca=prcomp(data[,-2],center=TRUE,scale.=TRUE)
pca=prcomp(data(c[,3:11],center=TRUE,scale.=TRUE)
pca=prcomp(data(c[,3:11],center=TRUE,scale.=TRUE)
d=data[c(1,3,4,5,6,7,8,9,10,11)]
d=df(data(c,1,3:10))
d
View(d)
pca=prcomp(d,center=TRUE,scale.=TRUE)
pca=prcomp(d[,-1],center=TRUE,scale.=TRUE)
attributes(pca)
pca$center
pca$center
print(pca)
summary(pca)
# Color and shape depend on factor (categorical variable)
ggplot(data, aes(x=data$Economy..GDP.per.Capita.
, y=data$Happiness.Score, color=Region, shape=Region)) +
geom_point(size=6, alpha=0.6)
ggplot(data, aes(x=data$Economy..GDP.per.Capita., y=data$Happiness.Score, color=Region, size=data$Happiness.Score)) +
geom_point(alpha=0.6)
plot(pca)
plot(pca)
eig.val<-get_eigenvalue(pca)
plot(pca)
library("FactoMineR")
library("factoextra")
library("corrplot")
library(mice)
library("mice")
eig.val <- get_eigenvalue(happy.pca)
eig.val
fviz_eig(happy.pca, addlabels = TRUE, ylim = c(0, 60), linecolor = "red", barfill = "darkblue", barcolor = "darkblue")
fviz_eig(pca, addlabels = TRUE, ylim = c(0, 60), linecolor = "red", barfill = "darkblue", barcolor = "darkblue")
fviz_cos2(happy.pca, choice ="var", axes = 1:2, top = 10, color = "darkblue" )
#principal component analyses
#only done on independent variables
#center=true means that variables are converted in such a way that the average becomes 0
#scale means that the data is normalised
pca=prcomp(d[,-1],center=TRUE,scale.=TRUE)
fviz_cos2(pca, choice ="var", axes = 1:2, top = 10, color = "darkblue" )
fviz_contrib(happy.pca, choice = "var", axes = 1, top = 5)
fviz_contrib(pca, choice = "var", axes = 1, top = 5)
fviz_pca_ind (pca, pointsize = "cos2", pointshape = 22, fill = "blue", repel = TRUE)
plot(pca,  select = "cos2 50", cex=1,  col.ind = "darkblue", title = "50 countries with highest cos2", cex.main=2, col.main= "darkblue")
autoplot(prcomp(data), data = data, colour = 'Regions',
loadings = TRUE, loadings.colour = 'blue',
loadings.label = TRUE, loadings.label.size = 3)
autoplot(prcomp(d), data = data, colour = 'Regions',
loadings = TRUE, loadings.colour = 'blue',
loadings.label = TRUE, loadings.label.size = 3)
install.packages("ggbiplot")
install.packages("ggbiplot")
library("ggbiplot")
library(devtools)
install.packages("devtools")
install.packages("devtools")
library("ggbiplot")
install_github("ggbiplot","vqv")
install("ggbiplot","vqv")
mydata=read.csv("Raport_2015.csv")
str(mydata)
library(ggfortify)
df <- mydata[c( 4,5,6,7,8,9,10,11)]
autoplot(prcomp(df))
prc=prcomp(df)
print(pcr)
print(prc)
autoplot(prc, data = mydata, colour = 'Region', loadings = TRUE)
print(prc)
autoplot(prc, data = mydata, colour = mydata$Happiness.Score, loadings = TRUE)
autoplot(prc, data = mydata, colour = mydata$Economy..GDP.per.Capita., loadings = TRUE)
autoplot(prc, data = mydata, colour = mydata$Economy..GDP.per.Capita, loadings = TRUE)
autoplot(prc, data = mydata, colour = mydata$Happiness.Rank, loadings = TRUE)
autoplot(prc, data = mydata, colour = 'Region',
loadings = TRUE, loadings.colour = 'blue',
loadings.label = TRUE, loadings.label.size = 3)
mydata=read.csv("Raport_2015.csv")
str(mydata)
df <- mydata[c( 4,5,6,7,8,9,10,11)]
View(df)
set.seed(1)
autoplot(kmeans(df, 3), data = df)
autoplot(kmeans(df, 3), data = df, label = TRUE, label.size = 3)
library(cluster)
autoplot(clara(df[-5], 3))
autoplot(clara(df[-5], 3))
autoplot(pam(df[-5], 3), frame = TRUE, frame.type = 'norm')
clusplot(df, fit$cluster, color=TRUE, shade=TRUE,
labels=2, lines=0)
library(fpc)
plotcluster(df, fit$cluster)
biplot(pca)
princomp(x, cor = FALSE, scores = TRUE, covmat = NULL)
princomp(d, cor = FALSE, scores = TRUE, covmat = NULL)
prcomp(d, cor = FALSE, scores = TRUE, covmat = NULL)
princomp(data, cor = FALSE, scores = TRUE, covmat = NULL)
pca$rotation
biplot(pca,scale=0)
screeplot(pca, npcs = min(10, length(pca$sdev)),
type = c("barplot", "lines"),
main = deparse(substitute(pca)))
screeplot(pca, npcs = 24, type = "lines")
eig.val <- get_eigenvalue(happy.pca)
eigen(pca, symmetric, only.values = FALSE, EISPACK = FALSE)
eigen(pca)
ev <- eigen(d)
# extract components
(values <- ev$values)
ev <- eigen(d)
ev <- eigen(pca)
attributes(pca)
eigen(pca$x)
print(pca$x)
print(pca)
print(pca)
ev<-eigen(cor(d))
library("corrplot")
ev<-eigen(M)
ev$values
plot(ev$values)
mat<-cor(d)
mat<-cor(df)
ev<-eigen(mat)
plot(ev$values)
ev<-eigen.loadings(pca)
vect<-eigen.loadings(pca)
plot(ev$vectors)
getwd
getwd()
